//
//Здесь будут блоки кода, выполняющи различние задачи и пояснения к ним.
//

//======

//int[] array = { 1, 2, 3 }; 
//Инициализация интового одномерноего массива, с заполнение заранее известными элементами.

//======

//Console.Write(string.Join(" ", array)); 
//Быстрый способ распечатать массив.

//======

// int num = 1246;
// int length = (int)Math.Log10(num) + 1; 
//Быстрый способ получить длину числа. Через логорифм.

//======

// while (int.TryParse(Console.ReadLine(), out int peremennaR) == false)
//     {
//         Console.Write("Введена не корректная длина массива. Попробуйте ещё раз: ");
//     }
// Вводим число, новертируем в инт и проверяем, на то былали строка успешно конвертирована. 
// если нет(пользователь ввёл не цифры или не целочисленные значения), то отрабатывает цикл и запрашивает ввод по новой.

//======

// Random randomNumb = new Random(); 
// int num = randomNumb.Next(1, 100);
//Позволяет создать рандомное натуральное число, в указанном диапозоне от мин(1) включительно к макс(100) не включительно.

//======

// Random randomDoub = new Random(); 
// double num2 = Math.Round(randomDoub.NextDouble() * 100, 3);
//Генерация случайных вещественных чисел.
//Где "3", это до какого знака после запятой нужно округлить с помощью Math.
//А "100", это до какого целого-положительного числа генерировать.

//======

//int num4 = new Random().Next(1, 5);
//Укороченый вариант генерации рандомного числа, в заданном диапозоне.
//Идея в том, что бы обойтись без создания отдельного экземпляра класса.   

//======

//Console.WriteLine($"{b:f2}"); 
// :f Способ ограничить колличество знаков после запятой, на выводе в консоль. 
//Где 2 - это колличество знаков. $ - обязательно для форматирования выводимой Строки. 

//======

//double num3 = Math.Truncate(num2); 
// Возвращает только целые числа. Т.е. отбрасывает все значения после запятой, без округления.

//======

//Math.Round(test, 3, MidpointRounding.ToZero)

//======
